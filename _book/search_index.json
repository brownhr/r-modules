[["index.html", "GHY 5800 - Quantitative Methods in Geography About 0.1 Usage 0.2 Render book 0.3 Preview book", " GHY 5800 - Quantitative Methods in Geography brownhr 2022-02-28 About This is a sample book written in Markdown. You can use anything that Pandocs Markdown supports; for example, a math equation \\(a^2 + b^2 = c^2\\). 0.1 Usage Each bookdown chapter is an .Rmd file, and each .Rmd file can contain one (and only one) chapter. A chapter must start with a first-level heading: # A good chapter, and can contain one (and only one) first-level heading. Use second-level and higher headings within chapters like: ## A short section or ### An even shorter section. The index.Rmd file is required, and is also your first book chapter. It will be the homepage when you render the book. 0.2 Render book You can render the HTML version of this example book without changing anything: Find the Build pane in the RStudio IDE, and Click on Build Book, then select your output format, or select All formats if youd like to use multiple formats from the same book source files. Or build the book from the R console: bookdown::render_book() To render this example to PDF as a bookdown::pdf_book, youll need to install XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. 0.3 Preview book As you work, you may start a local server to live preview this HTML book. This preview will update as you edit the book when you save individual .Rmd files. You can start the server in a work session by using the RStudio add-in Preview book, or from the R console: bookdown::serve_book() "],["r-module-1.html", "R Module 1 0.4 What is R? 0.5 R Studio 0.6 Getting Started 0.7 Basics of R 0.8 Importing and Visualizing Quantitative Data", " R Module 1 0.4 What is R? R, or the R Project for Statistical Computing, is a programming language designed for use in data analysis and data science. Initially developed in 1993, R has become one of the most popular languages for data science, due to its design towards statistics and data. R is popular in geographical data science, as there are many packages (add-on libraries of pre-built tools and functions) that can be used to perform GIS, Remote Sensing, or qualitative analyses. 0.5 R Studio R Studio is a popular IDE (Integrated Development Environment) that allows for more convenient programming in the R language. Rather than running R programs (scripts) from the command line, R Studio allows users to interactively write and execute scripts, as well as view data and file paths in a single environment. R Studio also allows users to manage and install packages, generate plots and figures, and knit code into a .PDF or .HTML for making reports. 0.6 Getting Started In order to use R and R Studio, youll need to download and install them onto your computer. If youve used R before, make sure youre using at least version 4.1.2 to make sure everything runs smoothly. Navigate to these websites to download the right version for your device (versions for both Windows and Mac exist!) Download R 4.1.2 for Windows 32/64-bit Download R for macOS Download RStudio 0.6.1 R Studio Interface Figure 1: The default interface for RStudio Above is a screenshot of RStudios interface; notice that the main window is divided into different panes, each with a different purpose. The main panes well use in this class are the Console (left), Environment (upper right), Files / Plot Viewer (bottom right), and Scripts (not shown). These panes are useful for different tasks: The Console is used to write code and view its output. This is (for now) where well run all of our code, and where we can see the results of our operations. The Environment tab shows different datasets and variables that we assign  well get into this more in future R Modules. The Files tab gives us a view into our working directory, a default folder that we can use to call other files, scripts, or data. The Plots tab is used when we generate a plot or image (e.g., with the plot() or hist() functions). The Scripts window is essential for staying organized in your projects; scripts are used to save R code to a file, which is necessary to stay organized, and allows you to pick up where you left off, rather than having to re-type code each time you start an R session. The other tabs and panes are useful, but those listed above are the most commonly-used. 0.7 Basics of R 0.7.1 Exploring data To begin with our first R Module, lets load and explore some basic data. For starters, we need to start RStudio; load the program from your computer and you should see an interface like whats shown above. Lets look at some introductory data - in this case, the painters dataset from the MASS package, which is included within R. Follow the directions below to load and view the dataset; Ill explain as we go along. To start, type the following into the console  the part of the window with the blue &gt; icon  and then hit the Enter key. library(MASS) head(painters) ## Composition Drawing Colour Expression School ## Da Udine 10 8 16 3 A ## Da Vinci 15 16 4 14 A ## Del Piombo 8 13 16 7 A ## Del Sarto 12 16 9 8 A ## Fr. Penni 0 15 8 0 A ## Guilio Romano 15 16 4 14 A When you see code in these boxes, thats code that can be run in RStudio (and whats cool is that this document was written entirely in RStudio, so the code you see is actually being run in an R session). So, when we run this code, we get a table (technically, a data.frame) of names and various attributes of historical painters. But what did we actually run? The library() function takes the name of an R package and loads it into the workspace. Because some packages take a long time to load, the user has to specify which ones are loaded into memory, as opposed to loading the \\(\\approx 18,000\\) packages on the Comprehensive R Archive Network (CRAN)  a network of servers that store code for R. We used library(MASS) to load the MASS package; note the capitalization  library(mass) will not work! After we loaded this package, we called head(painters) to look at the head  by default the first 6 rows  of the painters dataset. TIP: If youre not sure what a function in R does, you can enter a ? before the function in the console, e.g., ?head() to view documentation, arguments, and examples of the function We can also view specific variables in the dataset with the $ operator; for example, painters$School gives us: ## [1] A A A A A A A A A A B B B B B B C C C C C C D D D D D D D D D D E E E E E E E F F F F G G G G G G G H ## [52] H H H ## Levels: A B C D E F G H We can also see from this Use R to produce the following simple data summaries and visualizations commonly used for qualitative data: A histogram of the Composition variable from the painters dataset, using the hist() function. A horizontal bar chart of the Expression variable, using the barplot() function. Tip: use `?barplot() to see which argument you need to change to get a horizontal bar plot A pie chart of the Schools variable, using the pie() function. Hint: you need to wrap the pie() function around the table() function, because you need frequencies of each school, rather than just their label 0.8 Importing and Visualizing Quantitative Data Now, well work with a different dataset; the tutorials in this section are based on a built-in dataset called faithful, from the pre-loaded datasets package. It consists of a collection of observations of the Old Faithful geyser in Yellowstone National Park. There are two observation variables in the dataset. The first one, eruptions, is the duration of geyser eruptions. The second one, waiting, is the length of the waiting period until the next eruption. Use the function head() to examine these two observations. We can also view some summary statistics on this dataset, such as mean, median, etc.: summary(faithful) ## eruptions waiting ## Min. :1.600 Min. :43.0 ## 1st Qu.:2.163 1st Qu.:58.0 ## Median :4.000 Median :76.0 ## Mean :3.488 Mean :70.9 ## 3rd Qu.:4.454 3rd Qu.:82.0 ## Max. :5.100 Max. :96.0 Lets try some more meaningful summaries for quantitative data using R. Just as before, produce the following and put your output into your document. A histogram for the eruptions. R will automatically decide how to group your observations. Remember to plot only the eruptions variable. Another histogram of eruptions, but specify 2 data classes instead of the default values. Hint: use ?hist() to see more documentation on the hist() function. A boxplot of eruptions that is horizontal, rather than vertical. Use ?boxplot() to figure out how to change the orientation. Repeat steps 4-6 on a dataset of your own choosing and interpret the data. You can also use functions such as mean, median, quantile, etc. to help interpret your data. If youve made it this far, then congrats  youre learning R! Once youre done celebrating, give your document a title or header called R Module 1, add your name, and turn it in to Google Classroom. Bring any questions, insights, comments, or concerns to the next class! "],["r-module-2.html", "R Module 2 0.9 Working with R Scripts and Projects 0.10 Introductory Statistics", " R Module 2 0.9 Working with R Scripts and Projects In the previous R Module, we worked entirely within the context of the R console, which allowed us to run code line-by-line and see the results immediately. However, when working on more complex projects, its important to be able to stay organized, not only for your own sake, but also to help potential collaborators understand your workflow, which includes the people troubleshooting issues in your code! R scripts are designed exactly for this; scripts are essentially text files that allow you to save, review, and edit your code, then run your code all at once! This is necessary when doing real-world programming in R  coding is an iterative process, in which you work on things step-by-step until you get the desired code! Figure 2: Example of an R script written in RStudio 0.9.1 R Projects R Projects are an important (and essential!) way of maintaining and organizing your work within RStudio. Projects can be thought of like folders; theyre tools for containing all the scripts, files, and data that you need for your analyses. Projects also allow you to save all your progress, including the variables you create, the data you load, etc. You can also use Projects to save your workspace, so you can easily switch between working on class projects, R Modules, or whatever else youre doing, without losing any progress. Lets start by creating a new R Project! Go ahead and open RStudio, and create a new Project by clicking File &gt; New Project... Youll then get this window: Then, Select New Project Finally, enter R Module 2 as the name of the directory, and browse to a folder where you can find the Project again (e.g., your Documents folder) Once youve created your new Project, youll see that youre working within the Project when you see an icon   in the top-right corner. 0.9.2 Creating New Scripts As stated earlier, Scripts are simply text files containing the commands that you would otherwise enter into the console. This makes it easy to save progress, return to code later, share your code with friends and loved ones, and more. Going forward, well use Scripts whenever we want to perform analyses for our R Modules, which makes it easier to troubleshoot our code. Feel free to continue using the Console when exploring the data, though! Creating a new Script is very easy; either type Cmd/CTRL-Shift-N, or select File &gt; New File... &gt; R Script. Youll be greeted with a new Script, which can hold your code! Lets try out a few basic things  exploring some data. For now, well use the trees dataset from the wonderful datasets package. Enter the following into your script. By default, the datasets package is already loaded, but its good practice to have all of your library() calls at the beginning of your scripts, which is why its included here. library(datasets) tree_data &lt;- trees N.B.: The &lt;- arrow is called an assignment operator, and takes a value on the right of the arrow and assigns it to a variable on the left. R also has the = operator, which works similarly, but for now stick to using &lt;- to avoid confusion (there is a difference between &lt;- and = but its not important for now!). You can run code from Scripts in several ways; either line-by-line, by entering Cmd/CTRL-Enter, or by running the entire script with Cmd/CTRL-Alt-R. Go ahead and run everything now. What weve done so far is assign the trees dataset to the variable tree_data. You can see this variable in the Environment tab: Before we go any further, lets save our script (Cmd/CTRL-S) as tree_data.R Now, well get into the real content of why scripts are useful! Lets create some graphs and figures, but lets use some specialized packages to do so. 0.9.3 ggplot2 The amazing ggplot2 package is designed to generate high-quality, visually appealing graphs, figures, and even maps! Using this package is somewhat different than the base R plot() and hist() functions, but once you understand the core concept of how ggplot2 works, itll be easy to create your own graphs! For reference, the amazing R Graph Gallery is a treasure trove of information and examples on how to generate all sorts of figures with ggplot2, and can be found at https://www.r-graph-gallery.com/index.html Feel free to use this site (as well as Google, Stack Exchange, etc.!) when creating plots  there are hundreds of ways to customize your plots; enough to teach an entire course just on ggplot2! Using the trees dataset, lets create a scatter plot of tree height vs tree volume. Add the following into your script and hit run; you should be left with a plot! Ill explain what is happening. library(ggplot2) ## RStudio Community is a great place to get help: https://community.rstudio.com/c/tidyverse ggplot( data = tree_data, aes( x = Volume, y = Height ) ) + geom_point() The fundamental process of working within ggplot2 is that figures and graphs are generated as layers based on a set of data. Within the ggplot() function, we defined data = tree_data. However, we also need to tell ggplot2 what we want to plot from that data; this is done using something called Aesthetic Mappings, with the aes() function. This function (which is pretty much only used within ggplot()) assigns variables or columns within a dataset to a certain aspect of our plot, whether it be the x or y coordinate, the size of a point, the color of a line, etc. Many datasets have too many columns to graph all at once, so using the aes() function allows us to decide what attributes of our data we wish to visualize, and how those attributes are visualized. The geom_point() function translates our data and aesthetic mappings into an actual figure; it specifies the kind of graph we wish to create (in this case, a scatter plot or point plot). Notice the + operator between the ggplot() and the geom_point() calls; this is how ggplot2 adds and modifies layers on a plot. If you ever have errors making plots with ggplot2, this is one of the first things to check! Lets briefly discuss another plot: ggplot( data = tree_data, aes(x = Volume) ) + geom_histogram() + labs( title = &quot;Histogram of Tree Volume&quot;, x = &quot;Volume&quot;, y = &quot;Count&quot; ) We can create histograms using the geom_histogram() function. Additionally, adding axis labels and a title is done with the labs() function  again, note the + operator between each layer. Explore some of the documentation (?) of the functions we use to better understand usage and examples. Assignment 1: Create your own histogram of the tree_data dataset using ggplot2, showing: The distribution of the Height variable, 20 bins, A fill color of your choosing (hint: explore the fill and/or color arguments within the geom_histogram() function), Labels (title, x-axis, etc.) that accurately describe the plot Save the plot as an image and embed it into your document! 0.10 Introductory Statistics Now that weve covered some more fundamental R topics, we can discuss the quantitative methods of this R Module. Well keep it fairly light and talk about introductory descriptive statistics  Measures of Central Tendency and Measures of Dispersion. 0.10.1 Measures of Central Tendency These kinds of statistics give us insight into our set of data by giving us a single value which describes the middle of our data. These measures include the mean, median, and mode, which describe a different method of determining the typical value in the distribution, and all have their pros and cons. For more information, check out this site, which explains some more examples of Measures of Central Tendency. 0.10.1.1 The Mean The mean is defined as the sum of each observation, divided by the number of observations (i.e., the arithmetic average). numbers &lt;- c(1, 2, 6, 12, 4, 8, 9, 3, 5, 4, 7) sum(numbers) / length(numbers) ## [1] 5.545455 mean(numbers) ## [1] 5.545455 The mean is sensitive to outliers and skewed distributions, so its not always the best to use. 0.10.1.2 The Median The median can be thought of as the value closest to the middle of our distribution; it is the value which divides the data in half, such that half of our data lies on one side of the mean, and half on the other. numbers &lt;- c(1, 2, 6, 12, 4, 8, 9, 3, 5, 4, 7) sort(numbers) ## [1] 1 2 3 4 4 5 6 7 8 9 12 median(numbers) ## [1] 5 Compared to the mean, the median is less sensitive to outliers, making it better suited to data that is skewed in a particular direction. 0.10.1.3 The Mode The mode is simply the most commonly occurring value within a given distribution; if we were to count how many times each number appears, the mode would be the number with the most occurrences. The mode is also the measure best suited for categorical data  data such as names or factors that cannot be as easily measured and compared. ## Unfortunately, R does not have a built-in `mode()` function, so we&#39;ll have ## to make our own ## Don&#39;t worry too much on what this does, it&#39;s just an example, and is only ## one way of doing things! find_mode &lt;- function(x) { unique_data &lt;- unique(x) unique_data[which.max(tabulate(match(x, unique_data)))] } numbers &lt;- c(1, 2, 6, 12, 4, 8, 9, 3, 5, 4, 7) find_mode(numbers) ## [1] 4 actors &lt;- c(&quot;Robert&quot;, &quot;Chris&quot;, &quot;Chris&quot;, &quot;Jeremy&quot;, &quot;Scarlett&quot;, &quot;Mark&quot;, &quot;Samuel&quot;) find_mode(actors) ## [1] &quot;Chris&quot; 0.10.2 Assignment Assignment 2: Visualize and Explore the mtcars Dataset and Create Plots Using ggplot2 Create a new Script called mtcars.R, saving your following work within that Script Assign mtcars to an object (e.g., cars) using the &lt;- operator Choose three variables from mtcars (remember the $ operator), and for each: 1. Find the mean, median, and mode You may need to look online for how to find the mode in R! The base mode() function does something very different! Create a histogram in ggplot2 of that variable, with appropriate labels, title, etc. Choose two variables from mtcars and create a scatterplot in ggplot2 showing their relation - Include title, labels, etc. - Hint: scatter plots are made with the geom_point() function. - Use Google, Stack Exchange, and the built-in Help function to see examples and usage for how to make these plots Include a screenshot of your mtcars.R Script. - Remember that its good practice to have any library() call at the top of your script! - Scripts should be able to be read from top to bottom, so if you define an object (&lt;-) make sure youre not referencing that object earlier in the script than when you initialize it. Submit all assignment questions to Google Classroom! Be sure to include your name, the question number, and all figures! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
